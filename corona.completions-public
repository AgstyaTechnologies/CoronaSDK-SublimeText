
{
    "scope": "source.lua",

      "completions":
        [


"accelerometer.deltaTime",
"accelerometer.isShake",
"accelerometer.name",
"accelerometer.xGravity",
"accelerometer.xInstant",
"accelerometer.yGravity",
"accelerometer.yInstant",
"accelerometer.zGravity",
"accelerometer.zInstant",
"audio.channel",
"audio.completed",
"audio.handle",
"audio.name",
"audio.phase",
"axis.axis",
"axis.device",
"axis.name",
"axis.normalizedValue",
"axis.rawValue",
"collision.contact",
"collision.element1",
"collision.element2",
"collision.name",
"collision.object1",
"collision.object2",
"collision.phase",
"collision.x",
"collision.y",
"completion.action",
"completion.name",
"completion.target",
"creditsRequest.name",
"creditsRequest.newCredits",
"creditsRequest.totalCredits",
"enterFrame.name",
"enterFrame.time",
"fbconnect.didComplete",
"fbconnect.expiration",
"fbconnect.isError",
"fbconnect.name",
"fbconnect.phase",
"fbconnect.response",
"fbconnect.token",
"fbconnect.type",
"gameNetwork.data",
"gameNetwork.errorCode",
"gameNetwork.errorMessage",
"gameNetwork.localPlayerScore",
"gameNetwork.name",
"gameNetwork.provider",
"gameNetwork.type",
"gyroscope.deltaTime",
"gyroscope.name",
"gyroscope.xRotation",
"gyroscope.yRotation",
"gyroscope.zRotation",
"heading.geographic",
"heading.magnetic",
"heading.name",
"inputDeviceStatus.connectionStateChanged",
"inputDeviceStatus.device",
"inputDeviceStatus.name",
"inputDeviceStatus.reconfigured",
"key.descriptor",
"key.device",
"key.isAltDown",
"key.isCtrlDown",
"key.isShiftDown",
"key.keyName",
"key.name",
"key.nativeKeyCode",
"key.phase",
"licensing.errorType",
"licensing.expiration",
"licensing.isError",
"licensing.isVerified",
"licensing.name",
"licensing.provider",
"licensing.response",
"location.accuracy",
"location.altitude",
"location.direction",
"location.errorCode",
"location.errorMessage",
"location.latitude",
"location.longitude",
"location.name",
"location.speed",
"location.time",
"mapAddress.city",
"mapAddress.cityDetail",
"mapAddress.country",
"mapAddress.countryCode",
"mapAddress.errorMessage",
"mapAddress.isError",
"mapAddress.name",
"mapAddress.postalCode",
"mapAddress.region",
"mapAddress.regionDetail",
"mapAddress.street",
"mapAddress.streetDetail",
"mapLocation.errorMessage",
"mapLocation.isError",
"mapLocation.latitude",
"mapLocation.longitude",
"mapLocation.name",
"memoryWarning.name",
"mouse.isMiddleButtonDown",
"mouse.isPrimaryButtonDown",
"mouse.isSecondaryButtonDown",
"mouse.name",
"mouse.time",
"mouse.x",
"mouse.y",
"networkRequest.bytesEstimated",
"networkRequest.bytesTransferred",
"networkRequest.header",
"networkRequest.isError",
"networkRequest.name",
"networkRequest.phase",
"networkRequest.requestId",
"networkRequest.response",
"networkRequest.responseHeaders",
"networkRequest.responseType",
"networkRequest.status",
"networkRequest.url",
"networkStatus.address",
"networkStatus.isConnectionOnDemand",
"networkStatus.isConnectionRequired",
"networkStatus.isInteractionRequired",
"networkStatus.isReachable",
"networkStatus.isReachableViaCellular",
"networkStatus.isReachableViaWiFi",
"networkStatus.name",
"notification.applicationState",
"notification.custom",
"notification.name",
"notification.type",
"orientation.delta",
"orientation.name",
"orientation.type",
"popup.name",
"popup.type",
"postCollision.contact",
"postCollision.force",
"postCollision.friction",
"postCollision.name",
"postCollision.object1",
"postCollision.object2",
"postCollision.other",
"preCollision.contact",
"preCollision.element1",
"preCollision.element2",
"preCollision.name",
"preCollision.object1",
"preCollision.object2",
"preCollision.other",
"preCollision.x",
"preCollision.y",
"productList.invalidProducts",
"productList.name",
"productList.products",
"resize.name",
"createScene.name",
"createScene.params",
"destroyScene.name",
"didExitScene.name",
"enterScene.name",
"enterScene.params",
"exitScene.name",
"overlayBegan.name",
"overlayBegan.sceneName",
"overlayEnded.name",
"overlayEnded.sceneName",
"willEnterScene.name",
"willEnterScene.params",
"sprite.name",
"sprite.phase",
"sprite.sprite",
"sprite.target",
"storeTransaction.name",
"storeTransaction.transaction",
"system.name",
"system.type",
"system.url",
"tap.name",
"tap.numTaps",
"tap.x",
"tap.y",
"timer.count",
"timer.name",
"timer.source",
"timer.time",
"touch.id",
"touch.name",
"touch.phase",
"touch.target",
"touch.time",
"touch.x",
"touch.xStart",
"touch.y",
"touch.yStart",
"unhandledError.errorMessage",
"unhandledError.stackTrace",
"urlRequest.errorCode",
"urlRequest.errorMessage",
"urlRequest.name",
"urlRequest.type",
"urlRequest.url",
"userInput.newCharacters",
"userInput.oldText",
"userInput.phase",
"userInput.startPosition",
"userInput.target",
"userInput.text",
{ "trigger": "ads.hide()", "contents": "ads.hide( )"},
{ "trigger": "ads.init()", "contents": "ads.init( ${1:providerName}, ${2:appId} ${3:[, listener]} )"},
{ "trigger": "ads.show()", "contents": "ads.show( ${1:adUnitType} ${2:[, params]} )"},
{ "trigger": "analytics.init()", "contents": "analytics.init( ${1:apiKey} )"},
{ "trigger": "analytics.logEvent()", "contents": "analytics.logEvent( ${1:eventID} )"},
{ "trigger": "audio.dispose()", "contents": "audio.dispose( ${1:audioHandle} )"},
{ "trigger": "audio.fade()", "contents": "audio.fade( ${1:[ { [channel=c]} ${2:[, time=t]} ${3:[, volume=v ]}, ${4:} ]} )"},
{ "trigger": "audio.fadeOut()", "contents": "audio.fadeOut( ${1:[ { [channel=c]} ${2:[, time=t]}, ${3:} ]} )"},
{ "trigger": "audio.findFreeChannel()", "contents": "audio.findFreeChannel( ${1:[ startChannel ]} )"},
"audio.freeChannels",
{ "trigger": "audio.getDuration()", "contents": "audio.getDuration( ${1:audioHandle} )"},
{ "trigger": "audio.getMaxVolume()", "contents": "audio.getMaxVolume( ${1:{ channel=c }} )"},
{ "trigger": "audio.getMinVolume()", "contents": "audio.getMinVolume( ${1:{ channel=c }} )"},
{ "trigger": "audio.getVolume()", "contents": "audio.getVolume( ${1:[ { [channel=c]}, ${2:} ]} )"},
{ "trigger": "audio.isChannelActive()", "contents": "audio.isChannelActive( ${1:channel} )"},
{ "trigger": "audio.isChannelPaused()", "contents": "audio.isChannelPaused( ${1:channel} )"},
{ "trigger": "audio.isChannelPlaying()", "contents": "audio.isChannelPlaying( ${1:channel} )"},
{ "trigger": "audio.loadSound()", "contents": "audio.loadSound( ${1:audiofileName} ${2:[, baseDir ]} )"},
{ "trigger": "audio.loadStream()", "contents": "audio.loadStream( ${1:audioFileName} ${2:[, baseDir ]} )"},
{ "trigger": "audio.pause()", "contents": "audio.pause( ${1:[channel]} )"},
{ "trigger": "audio.play()", "contents": "audio.play( ${1:audioHandle} ${2:[, options ]} )"},
{ "trigger": "audio.reserveChannels()", "contents": "audio.reserveChannels( ${1:channels} )"},
"audio.reservedChannels",
{ "trigger": "audio.resume()", "contents": "audio.resume( ${1:[channel]} )"},
{ "trigger": "audio.rewind()", "contents": "audio.rewind( ${1:[, audioHandle ]} ${2:[, options ]} )"},
{ "trigger": "audio.seek()", "contents": "audio.seek( ${1:time} ${2:[, audioHandle ]} ${3:[, options ]} )"},
{ "trigger": "audio.setMaxVolume()", "contents": "audio.setMaxVolume( ${1:volume}, ${2:options} )"},
{ "trigger": "audio.setMinVolume()", "contents": "audio.setMinVolume( ${1:volume}, ${2:options} )"},
{ "trigger": "audio.setVolume()", "contents": "audio.setVolume( ${1:volume} ${2:[, options ]} )"},
{ "trigger": "audio.stop()", "contents": "audio.stop( ${1:[channel]} )"},
{ "trigger": "audio.stopWithDelay()", "contents": "audio.stopWithDelay( ${1:duration} ${2:[, options ]} )"},
"audio.totalChannels",
"audio.unreservedFreeChannels",
"audio.unreservedUsedChannels",
"audio.usedChannels",
{ "trigger": "credits.init()", "contents": "credits.init( ${1:ARG1} ${2:[, ARG2]} )"},
{ "trigger": "credits.requestUpdate()", "contents": "credits.requestUpdate( ${1:ARG1} ${2:[, ARG2]} )"},
{ "trigger": "credits.showOffers()", "contents": "credits.showOffers( ${1:ARG1} ${2:[, ARG2]} )"},
{ "trigger": "crypto.digest()", "contents": "crypto.digest( ${1:algorithm}, ${2:data} ${3:[, raw]} )"},
{ "trigger": "crypto.hmac()", "contents": "crypto.hmac( ${1:algorithm}, ${2:data}, ${3:key} ${4:[, raw]} )"},
"crypto.md4",
"crypto.md5",
"crypto.sha1",
"crypto.sha224",
"crypto.sha256",
"crypto.sha384",
"crypto.sha512",
"display.actualContentHeight",
"display.actualContentWidth",
{ "trigger": "display.capture()", "contents": "display.capture( ${1:displayObject} ${2:[, saveToPhotoLibraryFlag ]} )"},
{ "trigger": "display.captureBounds()", "contents": "display.captureBounds( ${1:screenBounds} ${2:[, saveToAlbum ]} )"},
{ "trigger": "display.captureScreen()", "contents": "display.captureScreen( )"},
"display.contentCenterX",
"display.contentCenterY",
"display.contentHeight",
"display.contentScaleX",
"display.contentScaleY",
"display.contentWidth",
"display.currentStage",
"display.fps",
{ "trigger": "display.getCurrentStage()", "contents": "display.getCurrentStage( )"},
"display.imageSuffix",
{ "trigger": "display.loadRemoteImage()", "contents": "display.loadRemoteImage( ${1:url}, ${2:method}, ${3:listener} ${4:[, params]}, ${5:destFilename} ${6:[, baseDir]} ${7:[, x, y]} )"},
{ "trigger": "display.newCircle()", "contents": "display.newCircle( ${1:[parentGroup,]}, ${2:xCenter}, ${3:yCenter}, ${4:radius} )"},
{ "trigger": "display.newEmbossedText()", "contents": "display.newEmbossedText( ${1:[parentGroup,]}, ${2:string}, ${3:left}, ${4:top}, ${5:[width, height,]}, ${6:font}, ${7:size} )"},
{ "trigger": "display.newGroup()", "contents": "display.newGroup( )"},
{ "trigger": "display.newImage()", "contents": "display.newImage( ${1:filename} ${2:[,baseDirectory]} ${3:[, left, top ]} )"},
{ "trigger": "display.newImageGroup()", "contents": "display.newImageGroup( ${1:imageSheet} )"},
{ "trigger": "display.newImageRect()", "contents": "display.newImageRect( ${1:[parentGroup,]}, ${2:filename}, ${3:[baseDirectory]}, ${4:width}, ${5:height} )"},
{ "trigger": "display.newLine()", "contents": "display.newLine( ${1:[parent,]}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2} )"},
{ "trigger": "display.newRect()", "contents": "display.newRect( ${1:[parentGroup,]}, ${2:left}, ${3:top}, ${4:width}, ${5:height} )"},
{ "trigger": "display.newRoundedRect()", "contents": "display.newRoundedRect( ${1:[parentGroup,]}, ${2:left}, ${3:top}, ${4:width}, ${5:height}, ${6:cornerRadius} )"},
{ "trigger": "display.newSprite()", "contents": "display.newSprite( ${1:imageSheet}, ${2:sequenceData} )"},
{ "trigger": "display.newText()", "contents": "display.newText( ${1:options} )"},
"display.pixelHeight",
"display.pixelWidth",
{ "trigger": "display.remove()", "contents": "display.remove( ${1:object} )"},
{ "trigger": "display.save()", "contents": "display.save( ${1:group}, ${2:\"group.jpg\"} )"},
"display.screenOriginX",
"display.screenOriginY",
{ "trigger": "display.setDefault()", "contents": "display.setDefault( ${1:key}, ${2:gray} )"},
{ "trigger": "display.setStatusBar()", "contents": "display.setStatusBar( ${1:mode} )"},
"display.statusBarHeight",
"display.topStatusBarContentHeight",
"display.viewableContentHeight",
"display.viewableContentWidth",
"easing.inExpo",
"easing.inOutExpo",
"easing.inOutQuad",
"easing.inQuad",
"easing.linear",
"easing.outExpo",
"easing.outQuad",
{ "trigger": "facebook.login()", "contents": "facebook.login( ${1:appId}, ${2:listener} ${3:[, permissions ]} )"},
{ "trigger": "facebook.logout()", "contents": "facebook.logout( )"},
{ "trigger": "facebook.publishInstall()", "contents": "facebook.publishInstall( ${1:appId} )"},
{ "trigger": "facebook.request()", "contents": "facebook.request( ${1:path} ${2:[, httpMethod, params]} )"},
{ "trigger": "facebook.showDialog()", "contents": "facebook.showDialog( ${1:action} ${2:[, params ]} )"},
{ "trigger": "gameNetwork.init()", "contents": "gameNetwork.init( ${1:providerName} ${2:[, ...]} )"},
"gameNetwork.request",
{ "trigger": "gameNetwork.show()", "contents": "gameNetwork.show( ${1:name} ${2:[, data ]} )"},
"global.assert",
"global.collectgarbage",
"global.error",
"global.getfenv",
"global.getmetatable",
"global.ipairs",
"global.next",
"global.pairs",
"global.pcall",
"global.print",
"global.rawequal",
"global.rawget",
"global.rawset",
"global.select",
"global.setfenv",
"global.setmetatable",
"global.tonumber",
"global.tostring",
"global.type",
"global.unpack",
{ "trigger": "graphics.newGradient()", "contents": "graphics.newGradient( ${1:color1}, ${2:color2}, ${3:[ , direction]} )"},
{ "trigger": "graphics.newImageSheet()", "contents": "graphics.newImageSheet( ${1:filename}, ${2:[baseDir, ]}, ${3:options} )"},
{ "trigger": "graphics.newMask()", "contents": "graphics.newMask( ${1:filename} ${2:[, baseDir]} )"},
{ "trigger": "io.close()", "contents": "io.close( ${1:[file]} )"},
{ "trigger": "io.flush()", "contents": "io.flush( )"},
{ "trigger": "io.input()", "contents": "io.input( ${1:[file]} )"},
{ "trigger": "io.lines()", "contents": "io.lines( ${1:filename} )"},
{ "trigger": "io.open()", "contents": "io.open( ${1:filename_path} ${2:[, mode]} )"},
{ "trigger": "io.output()", "contents": "io.output( ${1:[file]} )"},
{ "trigger": "io.read()", "contents": "io.read( ${1:[fmt1]} ${2:[, fmt2]} ${3:[, ...]} )"},
{ "trigger": "io.tmpfile()", "contents": "io.tmpfile( )"},
{ "trigger": "io.type()", "contents": "io.type( ${1:obj} )"},
{ "trigger": "io.write()", "contents": "io.write( ${1:arg1} ${2:[, arg2]} ${3:[, ...]} )"},
{ "trigger": "json.decode()", "contents": "json.decode( ${1:data} )"},
{ "trigger": "json.encode()", "contents": "json.encode( ${1:t} )"},
"json.null",
{ "trigger": "licensing.init()", "contents": "licensing.init( ${1:providerName} )"},
{ "trigger": "licensing.verify()", "contents": "licensing.verify( ${1:listener} )"},
{ "trigger": "math.abs()", "contents": "math.abs( ${1:x} )"},
{ "trigger": "math.acos()", "contents": "math.acos( ${1:x} )"},
{ "trigger": "math.asin()", "contents": "math.asin( ${1:x} )"},
{ "trigger": "math.atan()", "contents": "math.atan( ${1:x} )"},
{ "trigger": "math.atan2()", "contents": "math.atan2( ${1:y}, ${2:x} )"},
{ "trigger": "math.ceil()", "contents": "math.ceil( ${1:x} )"},
{ "trigger": "math.cos()", "contents": "math.cos( ${1:x} )"},
{ "trigger": "math.cosh()", "contents": "math.cosh( ${1:x} )"},
{ "trigger": "math.deg()", "contents": "math.deg( ${1:x} )"},
{ "trigger": "math.exp()", "contents": "math.exp( ${1:x} )"},
{ "trigger": "math.floor()", "contents": "math.floor( ${1:x} )"},
{ "trigger": "math.fmod()", "contents": "math.fmod( ${1:x}, ${2:y} )"},
{ "trigger": "math.frexp()", "contents": "math.frexp( ${1:x} )"},
"math.huge",
"math.inf",
{ "trigger": "math.ldexp()", "contents": "math.ldexp( ${1:m}, ${2:e} )"},
{ "trigger": "math.log()", "contents": "math.log( ${1:x} )"},
{ "trigger": "math.log10()", "contents": "math.log10( ${1:x} )"},
{ "trigger": "math.max()", "contents": "math.max( ${1:x}, ${2:...} )"},
{ "trigger": "math.min()", "contents": "math.min( ${1:x}, ${2:...} )"},
{ "trigger": "math.modf()", "contents": "math.modf( ${1:x} )"},
"math.pi",
{ "trigger": "math.pow()", "contents": "math.pow( ${1:x}, ${2:y} )"},
{ "trigger": "math.rad()", "contents": "math.rad( ${1:x} )"},
{ "trigger": "math.random()", "contents": "math.random( )"},
{ "trigger": "math.randomseed()", "contents": "math.randomseed( ${1:x} )"},
{ "trigger": "math.round()", "contents": "math.round( ${1:x} )"},
{ "trigger": "math.sin()", "contents": "math.sin( ${1:x} )"},
{ "trigger": "math.sinh()", "contents": "math.sinh( ${1:x} )"},
{ "trigger": "math.sqrt()", "contents": "math.sqrt( ${1:x} )"},
{ "trigger": "math.tan()", "contents": "math.tan( ${1:x} )"},
{ "trigger": "math.tanh()", "contents": "math.tanh( ${1:x} )"},
"media.RemoteSource",
{ "trigger": "media.getSoundVolume()", "contents": "media.getSoundVolume( )"},
"media.hasSource",
{ "trigger": "media.newEventSound()", "contents": "media.newEventSound( ${1:filename} ${2:[, baseDir]} )"},
{ "trigger": "media.newRecording()", "contents": "media.newRecording( ${1:[path]} )"},
{ "trigger": "media.pauseSound()", "contents": "media.pauseSound( )"},
{ "trigger": "media.playEventSound()", "contents": "media.playEventSound( ${1:sound} ${2:[, baseDir]} ${3:[, completionListener]} )"},
{ "trigger": "media.playSound()", "contents": "media.playSound( ${1:soundfile} ${2:[, baseDir]} ${3:[, onComplete]} )"},
{ "trigger": "media.playVideo()", "contents": "media.playVideo( ${1:path} ${2:[, baseSource ]}, ${3:showControls}, ${4:listener} )"},
{ "trigger": "media.save()", "contents": "media.save( ${1:filename} ${2:[, baseDir]} )"},
{ "trigger": "media.setSoundVolume()", "contents": "media.setSoundVolume( ${1:vol} )"},
{ "trigger": "media.show()", "contents": "media.show( ${1:mediaSource}, ${2:listener} )"},
{ "trigger": "media.stopSound()", "contents": "media.stopSound( )"},
{ "trigger": "native.canShowPopup()", "contents": "native.canShowPopup( ${1:name} )"},
{ "trigger": "native.cancelAlert()", "contents": "native.cancelAlert( ${1:alert} )"},
{ "trigger": "native.cancelWebPopup()", "contents": "native.cancelWebPopup( )"},
{ "trigger": "native.getFontNames()", "contents": "native.getFontNames( )"},
{ "trigger": "native.getProperty()", "contents": "native.getProperty( ${1:key} )"},
{ "trigger": "native.getSync()", "contents": "native.getSync( ${1:filename}, ${2:parms} )"},
{ "trigger": "native.newFont()", "contents": "native.newFont( ${1:name} ${2:[, size]} )"},
{ "trigger": "native.newMapView()", "contents": "native.newMapView( ${1:left}, ${2:top}, ${3:width}, ${4:height} )"},
{ "trigger": "native.newTextBox()", "contents": "native.newTextBox( ${1:left}, ${2:top}, ${3:width}, ${4:height} ${5:[, listener ]} )"},
{ "trigger": "native.newTextField()", "contents": "native.newTextField( ${1:left}, ${2:top}, ${3:width}, ${4:height} ${5:[, listener]} )"},
{ "trigger": "native.newVideo()", "contents": "native.newVideo( ${1:left}, ${2:top}, ${3:width}, ${4:height} )"},
{ "trigger": "native.newWebView()", "contents": "native.newWebView( ${1:left}, ${2:top}, ${3:width}, ${4:height} )"},
"native.requestExit",
{ "trigger": "native.setActivityIndicator()", "contents": "native.setActivityIndicator( ${1:state} )"},
{ "trigger": "native.setKeyboardFocus()", "contents": "native.setKeyboardFocus( ${1:textField} )"},
{ "trigger": "native.setProperty()", "contents": "native.setProperty( ${1:key}, ${2:value} )"},
{ "trigger": "native.setSync()", "contents": "native.setSync( ${1:filename}, ${2:params} )"},
{ "trigger": "native.showAlert()", "contents": "native.showAlert( ${1:title}, ${2:message} ${3:[, { buttonLabels } [, listener]}, ${4:]} )"},
{ "trigger": "native.showPopup()", "contents": "native.showPopup( ${1:name} )"},
{ "trigger": "native.showWebPopup()", "contents": "native.showWebPopup( ${1:url} ${2:[, options]} )"},
"native.systemFont",
"native.systemFontBold",
"network.canDetectNetworkStatusChanges",
{ "trigger": "network.cancel()", "contents": "network.cancel( ${1:requestId} )"},
{ "trigger": "network.download()", "contents": "network.download( ${1:url}, ${2:method}, ${3:listener} ${4:[, params]}, ${5:filename} ${6:[, baseDirectory]} )"},
{ "trigger": "network.request()", "contents": "network.request( ${1:url}, ${2:method}, ${3:listener} ${4:[, params]} )"},
{ "trigger": "network.setStatusListener()", "contents": "network.setStatusListener( ${1:hostURL}, ${2:listener} )"},
{ "trigger": "network.upload()", "contents": "network.upload( ${1:url}, ${2:method}, ${3:listener} ${4:[, params]}, ${5:filename} ${6:[, baseDirectory]} ${7:[, contentType]} )"},
{ "trigger": "os.clock()", "contents": "os.clock( )"},
{ "trigger": "os.date()", "contents": "os.date( ${1:[format [, time]}, ${2:]} )"},
{ "trigger": "os.difftime()", "contents": "os.difftime( ${1:t1}, ${2:t2} )"},
{ "trigger": "os.execute()", "contents": "os.execute( ${1:cmd} )"},
{ "trigger": "os.exit()", "contents": "os.exit( ${1:[ exit ]} )"},
{ "trigger": "os.remove()", "contents": "os.remove( ${1:file} )"},
{ "trigger": "os.rename()", "contents": "os.rename( ${1:oldname}, ${2:newname} )"},
{ "trigger": "os.time()", "contents": "os.time( ${1:[table]} )"},
"package.loaded",
"package.loaders",
"package.module",
"package.require",
"package.seeall",
{ "trigger": "physics.addBody()", "contents": "physics.addBody( ${1:object}, ${2:[bodyType,]}, ${3:{density=d}, ${4:friction=f}, ${5:bounce=b} ${6:[,radius=r]} ${7:[,filter=f]}, ${8:}} )"},
{ "trigger": "physics.fromMKS()", "contents": "physics.fromMKS( ${1:unitName}, ${2:value} )"},
{ "trigger": "physics.getAverageCollisionPositions()", "contents": "physics.getAverageCollisionPositions( )"},
{ "trigger": "physics.getDebugErrorsEnabled()", "contents": "physics.getDebugErrorsEnabled( )"},
{ "trigger": "physics.getGravity()", "contents": "physics.getGravity( )"},
{ "trigger": "physics.getMKS()", "contents": "physics.getMKS( ${1:key} )"},
{ "trigger": "physics.getReportCollisionsInContentCoordinates()", "contents": "physics.getReportCollisionsInContentCoordinates( )"},
{ "trigger": "physics.newJoint()", "contents": "physics.newJoint( ${1:jointType}, ${2:...} )"},
{ "trigger": "physics.pause()", "contents": "physics.pause( )"},
"physics.queryRegion",
"physics.rayCast",
"physics.reflectRay",
{ "trigger": "physics.removeBody()", "contents": "physics.removeBody( ${1:object} )"},
{ "trigger": "physics.setAverageCollisionPositions()", "contents": "physics.setAverageCollisionPositions( ${1:enabled} )"},
{ "trigger": "physics.setContinuous()", "contents": "physics.setContinuous( ${1:enabled} )"},
{ "trigger": "physics.setDebugErrorsEnabled()", "contents": "physics.setDebugErrorsEnabled( ${1:enabled} )"},
{ "trigger": "physics.setDrawMode()", "contents": "physics.setDrawMode( ${1:mode} )"},
{ "trigger": "physics.setGravity()", "contents": "physics.setGravity( ${1:gx}, ${2:gy} )"},
{ "trigger": "physics.setMKS()", "contents": "physics.setMKS( ${1:key}, ${2:value} )"},
{ "trigger": "physics.setPositionIterations()", "contents": "physics.setPositionIterations( ${1:value} )"},
{ "trigger": "physics.setReportCollisionsInContentCoordinates()", "contents": "physics.setReportCollisionsInContentCoordinates( ${1:enabled} )"},
{ "trigger": "physics.setScale()", "contents": "physics.setScale( ${1:value} )"},
{ "trigger": "physics.setTimeStep()", "contents": "physics.setTimeStep( ${1:dt} )"},
{ "trigger": "physics.setVelocityIterations()", "contents": "physics.setVelocityIterations( ${1:value} )"},
"physics.start",
{ "trigger": "physics.stop()", "contents": "physics.stop( )"},
{ "trigger": "physics.toMKS()", "contents": "physics.toMKS( ${1:unitName}, ${2:value} )"},
{ "trigger": "sprite.add()", "contents": "sprite.add( ${1:spriteSet}, ${2:sequenceName}, ${3:startFrame}, ${4:frameCount}, ${5:time}, ${6:[loopParam]} )"},
{ "trigger": "sprite.newSprite()", "contents": "sprite.newSprite( ${1:spriteSet} )"},
"sprite.newSpriteMultiSet(",
{ "trigger": "sprite.newSpriteSet()", "contents": "sprite.newSpriteSet( ${1:spriteSheet}, ${2:startFrame}, ${3:frameCount} )"},
{ "trigger": "sprite.newSpriteSheet()", "contents": "sprite.newSpriteSheet( ${1:spriteSheetFile}, ${2:[baseDir,]}, ${3:frameWidth}, ${4:frameHeight} )"},
{ "trigger": "sprite.newSpriteSheetFromData()", "contents": "sprite.newSpriteSheetFromData( ${1:spriteSheetImageFile}, ${2:[baseDir,]}, ${3:coordinateData} )"},
"store.availableStores",
"store.canLoadProducts",
"store.canMakePurchases",
{ "trigger": "store.finishTransaction()", "contents": "store.finishTransaction( ${1:transaction} )"},
{ "trigger": "store.init()", "contents": "store.init( ${1:[storeName,]}, ${2:listener} )"},
"store.isActive",
{ "trigger": "store.loadProducts()", "contents": "store.loadProducts( ${1:productIdentifiers}, ${2:listener} )"},
{ "trigger": "store.purchase()", "contents": "store.purchase( ${1:productList} )"},
{ "trigger": "store.restore()", "contents": "store.restore( )"},
"store.target",
"storyboard.disableAutoPurge",
{ "trigger": "storyboard.getCurrentSceneName()", "contents": "storyboard.getCurrentSceneName( )"},
{ "trigger": "storyboard.getPrevious()", "contents": "storyboard.getPrevious( )"},
{ "trigger": "storyboard.getScene()", "contents": "storyboard.getScene( ${1:sceneName} )"},
{ "trigger": "storyboard.gotoScene()", "contents": "storyboard.gotoScene( ${1:sceneName} ${2:[, options]} )"},
{ "trigger": "storyboard.hideOverlay()", "contents": "storyboard.hideOverlay( ${1:[ purgeOnly, effect, effectTime ]} )"},
"storyboard.isDebug",
{ "trigger": "storyboard.loadScene()", "contents": "storyboard.loadScene( ${1:sceneName} ${2:[, doNotLoadView, params ]} )"},
{ "trigger": "storyboard.newScene()", "contents": "storyboard.newScene( ${1:[ sceneName ]} )"},
{ "trigger": "storyboard.printMemUsage()", "contents": "storyboard.printMemUsage( )"},
{ "trigger": "storyboard.purgeAll()", "contents": "storyboard.purgeAll( )"},
"storyboard.purgeOnSceneChange",
{ "trigger": "storyboard.purgeScene()", "contents": "storyboard.purgeScene( ${1:sceneName} )"},
{ "trigger": "storyboard.reloadScene()", "contents": "storyboard.reloadScene( )"},
{ "trigger": "storyboard.removeAll()", "contents": "storyboard.removeAll( )"},
{ "trigger": "storyboard.removeScene()", "contents": "storyboard.removeScene( ${1:sceneName} )"},
{ "trigger": "storyboard.showOverlay()", "contents": "storyboard.showOverlay( ${1:sceneName} ${2:[, options ]} )"},
"storyboard.stage",
{ "trigger": "string.byte()", "contents": "string.byte( ${1:s} ${2:[, i [, j]}, ${3:]} )"},
{ "trigger": "string.char ()", "contents": "string.char ( ${1:[arg1 [, ...]} )"},
{ "trigger": "string.find ()", "contents": "string.find ( ${1:s}, ${2:pattern} ${3:[, init [, plain]}, ${4:]} )"},
{ "trigger": "string.format ()", "contents": "string.format ( ${1:formatstring} ${2:[, ...]} )"},
{ "trigger": "string.gmatch()", "contents": "string.gmatch( ${1:s}, ${2:pattern} )"},
{ "trigger": "string.gsub()", "contents": "string.gsub( ${1:s}, ${2:pattern}, ${3:repl} ${4:[, n]} )"},
{ "trigger": "string.len()", "contents": "string.len( ${1:s} )"},
{ "trigger": "string.lower()", "contents": "string.lower( ${1:s} )"},
{ "trigger": "string.match()", "contents": "string.match( ${1:s}, ${2:pattern} ${3:[, init]} )"},
{ "trigger": "string.rep()", "contents": "string.rep( ${1:s}, ${2:n} )"},
{ "trigger": "string.reverse()", "contents": "string.reverse( ${1:s} )"},
{ "trigger": "string.sub()", "contents": "string.sub( ${1:s}, ${2:i} ${3:[, j]} )"},
{ "trigger": "string.upper()", "contents": "string.upper( ${1:s} )"},
"system.CachesDirectory",
"system.DocumentsDirectory",
"system.ResourceDirectory",
"system.TemporaryDirectory",
{ "trigger": "system.activate()", "contents": "system.activate( ${1:feature} )"},
{ "trigger": "system.cancelNotification()", "contents": "system.cancelNotification( )"},
{ "trigger": "system.deactivate()", "contents": "system.deactivate( )"},
{ "trigger": "system.getIdleTimer()", "contents": "system.getIdleTimer( )"},
{ "trigger": "system.getInfo()", "contents": "system.getInfo( ${1:property} )"},
{ "trigger": "system.getInputDevices()", "contents": "system.getInputDevices( )"},
{ "trigger": "system.getPreference()", "contents": "system.getPreference( ${1:category}, ${2:name} )"},
{ "trigger": "system.getTimer()", "contents": "system.getTimer( )"},
{ "trigger": "system.hasEventSource()", "contents": "system.hasEventSource( ${1:eventName} )"},
{ "trigger": "system.openURL()", "contents": "system.openURL( ${1:url} )"},
"system.orientation",
{ "trigger": "system.pathForFile()", "contents": "system.pathForFile( ${1:filename} ${2:[, baseDirectory]} )"},
{ "trigger": "system.scheduleNotification()", "contents": "system.scheduleNotification( ${1:secondsFromNow} ${2:[, options]} )"},
{ "trigger": "system.setAccelerometerInterval()", "contents": "system.setAccelerometerInterval( ${1:frequency} )"},
{ "trigger": "system.setGyroscopeInterval()", "contents": "system.setGyroscopeInterval( ${1:frequency} )"},
{ "trigger": "system.setIdleTimer()", "contents": "system.setIdleTimer( ${1:enabled} )"},
{ "trigger": "system.setLocationAccuracy()", "contents": "system.setLocationAccuracy( ${1:distance} )"},
{ "trigger": "system.setLocationThreshold()", "contents": "system.setLocationThreshold( ${1:distance} )"},
{ "trigger": "system.setTapDelay()", "contents": "system.setTapDelay( ${1:delayTime} )"},
{ "trigger": "system.vibrate()", "contents": "system.vibrate( )"},
{ "trigger": "table.concat()", "contents": "table.concat( ${1:t} )"},
{ "trigger": "table.copy()", "contents": "table.copy( ${1:t} )"},
{ "trigger": "table.indexOf()", "contents": "table.indexOf( ${1:t}, ${2:element} )"},
{ "trigger": "table.insert()", "contents": "table.insert( ${1:t}, ${2:value} )"},
{ "trigger": "table.maxn()", "contents": "table.maxn( ${1:t} )"},
{ "trigger": "table.remove()", "contents": "table.remove( ${1:t} )"},
{ "trigger": "table.sort()", "contents": "table.sort( ${1:t} )"},
{ "trigger": "timer.cancel()", "contents": "timer.cancel( ${1:timerId} )"},
{ "trigger": "timer.pause()", "contents": "timer.pause( ${1:timerId} )"},
{ "trigger": "timer.performWithDelay()", "contents": "timer.performWithDelay( ${1:delay}, ${2:listener} ${3:[, iterations]} )"},
{ "trigger": "timer.resume()", "contents": "timer.resume( ${1:timerId} )"},
{ "trigger": "transition.cancel()", "contents": "transition.cancel( ${1:tweenReference} )"},
{ "trigger": "transition.dissolve()", "contents": "transition.dissolve( ${1:src}, ${2:dst}, ${3:duration}, ${4:delayDuration} )"},
{ "trigger": "transition.from()", "contents": "transition.from( ${1:target}, ${2:params} )"},
{ "trigger": "transition.to()", "contents": "transition.to( ${1:target}, ${2:params} )"},
"widget.migration",
{ "trigger": "widget.newButton()", "contents": "widget.newButton( ${1:options} )"},
{ "trigger": "widget.newPickerWheel()", "contents": "widget.newPickerWheel( ${1:options} )"},
{ "trigger": "widget.newProgressView()", "contents": "widget.newProgressView( ${1:options} )"},
{ "trigger": "widget.newScrollView()", "contents": "widget.newScrollView( ${1:options} )"},
{ "trigger": "widget.newSegmentedControl()", "contents": "widget.newSegmentedControl( ${1:options} )"},
{ "trigger": "widget.newSlider()", "contents": "widget.newSlider( ${1:options} )"},
{ "trigger": "widget.newSpinner()", "contents": "widget.newSpinner( ${1:options} )"},
{ "trigger": "widget.newStepper()", "contents": "widget.newStepper( ${1:options} )"},
{ "trigger": "widget.newSwitch()", "contents": "widget.newSwitch( ${1:options} )"},
{ "trigger": "widget.newTabBar()", "contents": "widget.newTabBar( ${1:options} )"},
{ "trigger": "widget.newTableView()", "contents": "widget.newTableView( ${1:options} )"},
{ "trigger": "widget.setTheme()", "contents": "widget.setTheme( ${1:themeFile} )"},
"type.Array",
"type.Boolean",
"type.Constant",
"type.CoronaClass",
"type.Event",
"type.Function",
"type.ImageGroup",
"type.Library",
"type.Listener",
"type.Module",
"type.Number",
"type.Object",
"type.String",
"type.Table",
"Body.angularDamping",
"Body.angularVelocity",
{ "trigger": "applyAngularImpulse()", "contents": "applyAngularImpulse( ${1:appliedForce} )"},
{ "trigger": "applyForce()", "contents": "applyForce( ${1:xForce}, ${2:yForce}, ${3:bodyX}, ${4:bodyY} )"},
{ "trigger": "applyLinearImpulse()", "contents": "applyLinearImpulse( ${1:xForce}, ${2:yForce}, ${3:bodyX}, ${4:bodyY} )"},
{ "trigger": "applyTorque()", "contents": "applyTorque( ${1:appliedForce} )"},
"Body.bodyType",
{ "trigger": "getLinearVelocity()", "contents": "getLinearVelocity( )"},
"Body.gravityScale",
"Body.isAwake",
"Body.isBodyActive",
"Body.isBullet",
"Body.isFixedRotation",
"Body.isSensor",
"Body.isSleepingAllowed",
"Body.linearDamping",
{ "trigger": "resetMassData()", "contents": "resetMassData( )"},
{ "trigger": "setLinearVelocity()", "contents": "setLinearVelocity( ${1:xVelocity}, ${2:yVelocity} )"},
"ButtonWidget.getLabel",
"ButtonWidget.setEnabled",
"ButtonWidget.setLabel",
"CoronaLibrary.getCurrentProvider",
"CoronaLibrary.name",
"CoronaLibrary.publisherId",
"CoronaLibrary.revision",
"CoronaLibrary.setCurrentProvider",
"CoronaLibrary.version",
"CoronaPrototype.initialize",
"CoronaPrototype.instanceOf",
"CoronaPrototype.isClass",
"CoronaPrototype.isRoot",
"CoronaPrototype.new",
"CoronaPrototype.newClass",
"CoronaPrototype.setExtension",
"DisplayObject.alpha",
"DisplayObject.blendMode",
"DisplayObject.contentBounds",
"DisplayObject.contentHeight",
"DisplayObject.contentToLocal",
"DisplayObject.contentWidth",
"DisplayObject.height",
"DisplayObject.isHitTestMasked",
"DisplayObject.isHitTestable",
"DisplayObject.isVisible",
"DisplayObject.localToContent",
"DisplayObject.maskRotation",
"DisplayObject.maskScaleX",
"DisplayObject.maskScaleY",
"DisplayObject.maskX",
"DisplayObject.maskY",
"DisplayObject.parent",
"DisplayObject.removeSelf",
"DisplayObject.rotate",
"DisplayObject.rotation",
"DisplayObject.scale",
"DisplayObject.setMask",
"DisplayObject.setReferencePoint",
"DisplayObject.toBack",
"DisplayObject.toFront",
"DisplayObject.translate",
"DisplayObject.width",
"DisplayObject.x",
"DisplayObject.xOrigin",
"DisplayObject.xReference",
"DisplayObject.xScale",
"DisplayObject.y",
"DisplayObject.yOrigin",
"DisplayObject.yReference",
"DisplayObject.yScale",
"EventListener.addEventListener",
"EventListener.dispatchEvent",
"EventListener.removeEventListener",
{ "trigger": "close()", "contents": "close( )"},
{ "trigger": "flush()", "contents": "flush( )"},
{ "trigger": "lines()", "contents": "lines( )"},
{ "trigger": "read()", "contents": "read( ${1:[fmt1]} ${2:[, fmt2]} ${3:[, ...]} )"},
{ "trigger": "seek()", "contents": "seek( ${1:[mode]} ${2:[, offset]} )"},
{ "trigger": "setvbuf()", "contents": "setvbuf( ${1:mode} ${2:[, size ]} )"},
{ "trigger": "write()", "contents": "write( ${1:arg1} ${2:[, arg2]} ${3:[, ...]} )"},
"GameNetwork.match",
"GameNetwork.outcome",
"GameNetwork.participant",
"GameNetwork.status",
"GroupObject.insert",
"GroupObject.numChildren",
"GroupObject.remove",
"InputAxis.accuracy",
"InputAxis.descriptor",
"InputAxis.maxValue",
"InputAxis.minValue",
"InputAxis.number",
"InputAxis.type",
"InputDevice.androidDeviceId",
"InputDevice.canVibrate",
"InputDevice.connectionState",
"InputDevice.descriptor",
"InputDevice.displayName",
"InputDevice.getAxes",
"InputDevice.isConnected",
"InputDevice.permanentId",
"InputDevice.type",
"InputDevice.vibrate",
"Joint.dampingRatio",
"Joint.frequency",
{ "trigger": "getAnchorA()", "contents": "getAnchorA( )"},
{ "trigger": "getAnchorB()", "contents": "getAnchorB( )"},
"Joint.getGroundAnchorA",
"Joint.getGroundAnchorB",
{ "trigger": "getLimits()", "contents": "getLimits( )"},
"Joint.getLocalAnchorA",
"Joint.getLocalAnchorB",
"Joint.getLocalAxisA",
{ "trigger": "getReactionForce()", "contents": "getReactionForce( )"},
{ "trigger": "getRotationLimits()", "contents": "getRotationLimits( )"},
"Joint.getTarget",
"Joint.isActive",
"Joint.isCollideConnected",
"Joint.isLimitEnabled",
"Joint.isMotorEnabled",
"Joint.joint1",
"Joint.joint2",
"Joint.jointAngle",
"Joint.jointSpeed",
"Joint.jointTranslation",
"Joint.length",
"Joint.length1",
"Joint.length2",
"Joint.limitState",
"Joint.maxForce",
"Joint.maxLength",
"Joint.maxMotorForce",
"Joint.maxMotorTorque",
"Joint.maxTorque",
"Joint.motorForce",
"Joint.motorSpeed",
"Joint.motorTorque",
"Joint.ratio",
"Joint.reactionTorque",
"Joint.referenceAngle",
"Joint.removeSelf",
{ "trigger": "setLimits()", "contents": "setLimits( ${1:upper}, ${2:lower} )"},
{ "trigger": "setRotationLimits()", "contents": "setRotationLimits( ${1:lowerLimit}, ${2:upperLimit} )"},
"Joint.setTarget",
"Joint.springDampingRatio",
"Joint.springFrequency",
{ "trigger": "append()", "contents": "append( ${1:x}, ${2:y} ${3:[, ... ]} )"},
{ "trigger": "setColor()", "contents": "setColor( ${1:red}, ${2:green}, ${3:blue} ${4:[, alpha ]} )"},
"Map.addMarker",
"Map.getAddressLocation",
"Map.getUserLocation",
"Map.isLocationVisible",
"Map.isScrollEnabled",
"Map.isZoomEnabled",
"Map.mapType",
"Map.nearestAddress",
"Map.removeAllMarkers",
"Map.requestLocation",
"Map.setCenter",
"Map.setRegion",
"PhysicsContact.bounce",
"PhysicsContact.friction",
"PhysicsContact.isEnabled",
"PhysicsContact.isTouching",
"PickerWidget.getValues",
"ProgressViewWidget.getProgress",
"ProgressViewWidget.resizeView",
"ProgressViewWidget.setProgress",
{ "trigger": "getSampleRate()", "contents": "getSampleRate( )"},
{ "trigger": "getTunerFrequency()", "contents": "getTunerFrequency( )"},
{ "trigger": "getTunerVolume()", "contents": "getTunerVolume( )"},
{ "trigger": "isRecording()", "contents": "isRecording( )"},
{ "trigger": "setSampleRate()", "contents": "setSampleRate( ${1:r} )"},
{ "trigger": "startRecording()", "contents": "startRecording( )"},
{ "trigger": "startTuner()", "contents": "startTuner( )"},
{ "trigger": "stopRecording()", "contents": "stopRecording( )"},
{ "trigger": "stopTuner()", "contents": "stopTuner( )"},
{ "trigger": "hasEventSource()", "contents": "hasEventSource( ${1:eventSourceName} )"},
{ "trigger": "hideErrorAlerts()", "contents": "hideErrorAlerts( )"},
"ScrollViewWidget.getContentPosition",
"ScrollViewWidget.scrollTo",
"ScrollViewWidget.scrollToPosition",
"ScrollViewWidget.setScrollHeight",
"ScrollViewWidget.setScrollWidth",
"ScrollViewWidget.takeFocus",
"SliderWidget.setValue",
"SliderWidget.value",
"SpinnerWidget.start",
"SpinnerWidget.stop",
"SpriteInstance.animating",
"SpriteInstance.currentFrame",
{ "trigger": "pause()", "contents": "pause( )"},
{ "trigger": "play()", "contents": "play( )"},
{ "trigger": "prepare()", "contents": "prepare( ${1:[sequence]} )"},
"SpriteInstance.sequence",
"SpriteInstance.timeScale",
"SpriteObject.frame",
"SpriteObject.isPlaying",
"SpriteObject.numFrames",
{ "trigger": "pause()", "contents": "pause( )"},
{ "trigger": "play()", "contents": "play( )"},
"SpriteObject.sequence",
{ "trigger": "setFrame()", "contents": "setFrame( ${1:frameIndex} )"},
"SpriteObject.setSequence",
"SpriteObject.timeScale",
{ "trigger": "dispose()", "contents": "dispose( )"},
{ "trigger": "setFocus()", "contents": "setFocus( ${1:object} ${2:[, touchId ]} )"},
"StepperWidget.maximumValue",
"StepperWidget.minimumValue",
"StepperWidget.value",
"SwitchWidget.setState",
"TabBarWidget.setSelected",
"TableViewWidget.deleteAllRows",
"TableViewWidget.deleteRow",
"TableViewWidget.getContentPosition",
"TableViewWidget.getNumRows",
"TableViewWidget.insertRow",
"TableViewWidget.scrollToIndex",
"TableViewWidget.scrollToY",
"TextBox.align",
"TextBox.font",
"TextBox.hasBackground",
"TextBox.isEditable",
"TextBox.setReturnKey",
"TextBox.setTextColor",
"TextBox.size",
"TextBox.text",
"TextField.align",
"TextField.font",
"TextField.hasBackground",
"TextField.inputType",
"TextField.isSecure",
"TextField.setReturnKey",
"TextField.setTextColor",
"TextField.size",
"TextField.text",
"TextObject.setTextColor",
"TextObject.size",
"TextObject.text",
{ "trigger": "setFillColor()", "contents": "setFillColor( ${1:gray} )"},
{ "trigger": "setStrokeColor()", "contents": "setStrokeColor( ${1:red}, ${2:green}, ${3:blue} ${4:[, alpha ]} )"},
"VectorObject.strokeWidth",
"Video.currentTime",
"Video.isMuted",
"Video.load",
"Video.pause",
"Video.play",
"Video.seek",
"Video.totalTime",
"WebView.back",
"WebView.canGoBack",
"WebView.canGoForward",
"WebView.forward",
"WebView.hasBackground",
"WebView.reload",
"WebView.request",
"WebView.stop",

      ""
    ]
}

