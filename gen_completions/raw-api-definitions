ads.hide()
ads.init( providerName, appId [, listener] )
ads.show( adUnitType [, params] )
analytics.init( apiKey )
analytics.logEvent( eventID )
audio.dispose( audioHandle )
audio.fade( [ { [channel=c] [, time=t] [, volume=v ] } ] )
audio.fadeOut( [ { [channel=c] [, time=t] } ] )
audio.findFreeChannel( [ startChannel ] )
audio.freeChannels
audio.getDuration( audioHandle )
audio.getMaxVolume( { channel=c } )
audio.getMinVolume( { channel=c } )
audio.getVolume( [ { [channel=c]  } ] )
audio.isChannelActive( channel )
audio.isChannelPaused( channel )
audio.isChannelPlaying( channel )
audio.loadSound( audiofileName [, baseDir ]  )
audio.loadStream( audioFileName [, baseDir ]  )
audio.pause( [channel] )
audio.play( audioHandle [, options ] )
audio.reserveChannels( channels )
audio.reservedChannels
audio.resume( [channel] )
audio.rewind( [audioHandle | options] )
audio.seek( time [, audioHandle ] [, options ] )
audio.setMaxVolume( volume, options )
audio.setMinVolume( volume, options )
audio.setVolume( volume [, options ] )
audio.stop( [channel] )
audio.stopWithDelay( duration [, options ] )
audio.totalChannels
audio.unreservedFreeChannels
audio.unreservedUsedChannels
audio.usedChannels
credits.init( ARG1 [, ARG2] )
credits.requestUpdate( ARG1 [, ARG2] )
credits.showOffers( ARG1 [, ARG2] )
crypto.digest( algorithm, data [, raw] )
crypto.hmac( algorithm, data, key [, raw] )
crypto.md4
crypto.md5
crypto.sha1
crypto.sha224
crypto.sha256
crypto.sha384
crypto.sha512
display.capture( displayObject [, saveToPhotoLibraryFlag ] )
display.captureBounds( screenBounds [, saveToAlbum ] )
display.captureScreen()
display.getCurrentStage()
display.loadRemoteImage( url, method, listener [, params], destFilename [, baseDir] [, x, y] )
display.newCircle( [parentGroup,] xCenter, yCenter, radius )
display.newEmbossedText( [parentGroup,] string, left, top, [width, height,] font, size )
display.newGroup()
display.newImage( filename [,baseDirectory] [, left, top ] )
display.newImageGroup( imageSheet )
display.newImageRect( [parentGroup,] filename, [baseDirectory,] width, height )
display.newLine( [parentGroup,] x1, y1, x2, y2 )
display.newRect( [parentGroup,] left, top, width, height )
display.newRoundedRect( [parentGroup,] left, top, width, height, cornerRadius )
display.newSprite( imageSheet, sequenceData )
display.newText( { options } )
display.remove( object )
display.save( displayObject, filename [, baseDirectory] )
display.setDefault( key, r, g, b, alpha )
display.setStatusBar( mode )
facebook.login( appId, listener [, permissions ] )
facebook.logout()
facebook.publishInstall( appId )
facebook.request( path [, httpMethod, params] )
facebook.showDialog( action [, params ] )
gameNetwork.init( providerName [, ...] )
gameNetwork.show( name [, data ] )
graphics.newGradient( color1, color2 [ , direction] )
graphics.newImageSheet( filename, [baseDir, ] options )
graphics.newMask( filename [, baseDir] )
io.close( [file] )
io.flush()
io.input( [file] )
io.lines( filename )
io.open( filename_path, [, mode] )
io.output( [file] )
io.read( [fmt1] [, fmt2] [, ...] )
io.tmpfile()
io.type( obj )
io.write( arg1 [, arg2] [, ...] )
json.decode( data )
json.encode( table )
json.null
licensing.init( providerName )
licensing.verify( listener )
math.abs( x )
math.acos( x )
math.asin( x )
math.atan( x )
math.atan2( y, x )
math.ceil( x )
math.cos( x )
math.cosh( x )
math.deg( x )
math.exp( x )
math.floor( x )
math.fmod( x, y )
math.frexp( x )
math.huge
math.inf
math.ldexp( m, e )
math.log( x )
math.log10( x )
math.max( x, ... )
math.min( x, ... )
math.modf( x )
math.pi
math.pow( x, y )
math.rad( x )
math.random()
math.randomseed( x )
math.round( x )
math.sin( x )
math.sinh( x )
math.sqrt( x )
math.tan( x )
math.tanh( x )
media.RemoteSource
media.getSoundVolume()
media.newEventSound( filename [, baseDir] )
media.newRecording( [path] )
media.pauseSound()
media.playEventSound( sound [, baseDir] [, completionListener] )
media.playSound( soundfile [, baseDir] [, onComplete] )
media.playVideo( path [, baseSource ], showControls, listener )
media.save( filename [, baseDir] )
media.setSoundVolume( vol )
media.show( mediaSource, listener )
media.stopSound()
native.canShowPopup( name )
native.cancelAlert( alert )
native.cancelWebPopup()
native.getFontNames()
native.getProperty( key )
native.getSync( filename, parms )
native.newFont( name [, size] )
native.newMapView( left, top, width, height )
native.newTextBox( left, top, width, height [, listener ] )
native.newTextField( left, top, width, height [, listener] )
native.newVideo( left, top, width, height )
native.newWebView( left, top, width, height )
native.setActivityIndicator( state )
native.setKeyboardFocus( textField )
native.setProperty( key, value )
native.setSync( filename, params )
native.showAlert( title, message [, { buttonLabels } [, listener] ] )
native.showPopup( name )
native.showWebPopup( url [, options] )  
network.canDetectNetworkStatusChanges
network.cancel( requestId )
network.download( url, method, listener [, params], filename [, baseDirectory] )
network.request( url, method, listener [, params] )
network.setStatusListener( hostURL, listener )
network.upload( url, method, listener [, params], filename [, baseDirectory] [, contentType] )
os.clock()
os.date( [format [, time] ] )
os.difftime( t1, t2 )
os.execute( cmd )
os.exit( [ exit ] )
os.remove( file )
os.rename( oldname, newname )
os.time( [table] )
package.loaded
package.loaders
package.seeall
physics.addBody(object, [bodyType,] {density=d, friction=f, bounce=b [,radius=r] [,filter=f]})
physics.fromMKS( unitName, value ) 
physics.getAverageCollisionPositions()
physics.getDebugErrorsEnabled()
physics.getGravity()
physics.getMKS( key )
physics.getReportCollisionsInContentCoordinates()
physics.newJoint( jointType, ... )
physics.pause()
physics.removeBody( object )
physics.setAverageCollisionPositions( enabled )
physics.setContinuous( enabled )
physics.setDebugErrorsEnabled( enabled )
physics.setDrawMode( mode )
physics.setGravity( gx, gy )
physics.setMKS( key, value )
physics.setPositionIterations( value )
physics.setReportCollisionsInContentCoordinates( enabled )
physics.setScale( value )
physics.setTimeStep( dt )
physics.setVelocityIterations( value )
physics.stop()
physics.toMKS( unitName, value )
sprite.add( spriteSet, sequenceName, startFrame, frameCount, time [, loopParam] )
sprite.newSprite( spriteSet )
sprite.newSpriteMultiSet(
sprite.newSpriteSet( spriteSheet, startFrame, frameCount )
sprite.newSpriteSheet( spriteSheetFile, [baseDir,]  frameWidth, frameHeight )
sprite.newSpriteSheetFromData( spriteSheetImageFile, [baseDir,] coordinateData )
store.availableStores
store.canLoadProducts
store.canMakePurchases
store.finishTransaction( transaction )
store.init( [storeName,] listener )
store.isActive
store.loadProducts( productIdentifiers, listener )
store.purchase( productList )
store.restore()
store.target
storyboard.disableAutoPurge
storyboard.getCurrentSceneName()
storyboard.getPrevious()
storyboard.getScene( sceneName )
storyboard.gotoScene( sceneName [, options] )
storyboard.hideOverlay( [ purgeOnly, effect, effectTime ] )
storyboard.loadScene( sceneName [, doNotLoadView, params ] )
storyboard.newScene( [ sceneName ] )
storyboard.printMemUsage()
storyboard.purgeAll()
storyboard.purgeScene( sceneName )
storyboard.reloadScene()
storyboard.removeAll()
storyboard.removeScene( sceneName )
storyboard.showOverlay( sceneName [, options ] )
storyboard.stage
string.byte( s [, i [, j]] )
string.char( [arg1 [, ...] )
string.find( s, pattern [, init [, plain]] )
string.format( formatstring [, ...] )
string.gmatch( s, pattern )
string.gsub( s, pattern, repl [, n] )
string.len( s )
string.lower( s )
string.match( s, pattern [, init] ) 
string.rep( s, n )
string.reverse( s )
string.sub( s, i [, j] )
string.upper( s )
system.CachesDirectory
system.DocumentsDirectory
system.ResourceDirectory
system.TemporaryDirectory
system.activate( feature )
system.cancelNotification()
system.deactivate()
system.getIdleTimer()
system.getInfo( property )
system.getInputDevices()
system.getPreference( category, name )
system.getTimer()
system.hasEventSource( eventName )
system.openURL( url )
system.orientation
system.pathForFile( filename [, baseDirectory] )
system.scheduleNotification( secondsFromNow [, options] )
system.setAccelerometerInterval( frequency )
system.setGyroscopeInterval( frequency )
system.setIdleTimer( enabled )
system.setLocationAccuracy( distance )
system.setLocationThreshold( distance )
system.setTapDelay( delayTime )
system.vibrate()
table.concat( t )
table.copy( t )
table.indexOf( t, element )
table.insert( t, value )
table.maxn( t )
table.remove( t )
table.sort( t )
timer.cancel( timerId )
timer.pause( timerId )
timer.performWithDelay( delay, listener [, iterations] )
timer.resume( timerId )
transition.blink( target, params )
transition.cancel()
transition.fadeIn( target, params )
transition.fadeOut( target, params )
transition.from( target, params )
transition.moveBy( target, params )
transition.moveTo( target, params )
transition.pause()
transition.resume()
transition.scaleBy( target, params )
transition.scaleTo( target, params )
transition.to( target, params )
widget.newButton( options )
widget.newPickerWheel( options )
widget.newProgressView( options )
widget.newScrollView( options )
widget.newSegmentedControl( options )
widget.newSlider( options )
widget.newSpinner( options )
widget.newStepper( options )
widget.newSwitch( options )
widget.newTabBar( options )
widget.newTableView( options )
widget.setTheme( themeFile )
