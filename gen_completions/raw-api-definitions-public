	latitude:setText( latitudeText )	location
	longitude:setText( longitudeText )	location
	speed:setText( speedText )	location
Array	type
Body:applyAngularImpulse( appliedForce )	Body
Body:applyForce( xForce, yForce, bodyX, bodyY )	Body
Body:applyLinearImpulse( xForce, yForce, bodyX, bodyY )	Body
Body:applyTorque( appliedForce )	Body
Body:getLinearVelocity()	Body
Body:resetMassData()	Body
Body:setLinearVelocity( xVelocity, yVelocity )	Body
Boolean	type
Constant	type
CoronaClass	type
Event	type
File:close()	File
File:flush()	File
File:lines()	File
File:read( [fmt1] [, fmt2] [, ...] )	File
File:seek( [mode] [, offset] )	File
File:setvbuf( mode [, size ] )	File
File:write( arg1 [, arg2] [, ...] )	File
Function	type
ImageGroup	type
Joint:getAnchorA()	Joint
Joint:getAnchorB()	Joint
Joint:getLimits()	Joint
Joint:getReactionForce()	Joint
Joint:getRotationLimits()	Joint
Joint:setLimits( upper, lower )	Joint
Joint:setRotationLimits( lowerLimit, upperLimit )	Joint
Library	type
LineObject:append( x, y [, ... ] )	LineObject
LineObject:setColor( red, green, blue [, alpha ] )	LineObject
Listener	type
Number	type
Object	type
Recording:getSampleRate()	Recording
Recording:getTunerFrequency()	Recording
Recording:getTunerVolume()	Recording
Recording:isRecording()	Recording
Recording:setSampleRate( r )	Recording
Recording:startRecording()	Recording
Recording:startTuner()	Recording
Recording:stopRecording()	Recording
Recording:stopTuner()	Recording
Runtime:hasEventSource( eventSourceName )	Runtime
Runtime:hideErrorAlerts( )	Runtime
SpriteObject:pause()	SpriteObject
SpriteObject:play()	SpriteObject
SpriteObject:setFrame( frameIndex )	SpriteObject
StageObject:setFocus( object [, touchId ] )	StageObject
String	type
Table	type
Userdata	type
accuracy	InputAxis
addEventListener( eventName, listener )	EventListener
addMarker( latitude, longitude )	Map
ads.hide()	ads
ads.init( providerName, appId [, listener] )	ads
ads.show( adUnitType [, params] )	ads
align	TextBox
align	TextField
alpha	DisplayObject
analytics.init( apiKey )	analytics
analytics.logEvent( eventID )	analytics
anchorX	DisplayObject
anchorY	DisplayObject
androidDeviceId	InputDevice
angularDamping	Body
angularVelocity	Body
assert( v [, message] )	global
audio.dispose( audioHandle )	audio
audio.fade( [ { [channel=c] [, time=t] [, volume=v ] } ] )	audio
audio.fadeOut( [ { [channel=c] [, time=t] } ] )	audio
audio.findFreeChannel( [ startChannel ] )	audio
audio.freeChannels	audio
audio.getDuration( audioHandle )	audio
audio.getMaxVolume( { channel=c } )	audio
audio.getMinVolume( { channel=c } )	audio
audio.getVolume( [ { [channel=c]  } ] )	audio
audio.isChannelActive( channel )	audio
audio.isChannelPaused( channel )	audio
audio.isChannelPlaying( channel )	audio
audio.loadSound( audiofileName [, baseDir ]  )	audio
audio.loadStream( audioFileName [, baseDir ]  )	audio
audio.pause( [channel] )	audio
audio.play( audioHandle [, options ] )	audio
audio.reserveChannels( channels )	audio
audio.reservedChannels	audio
audio.resume( [channel] )	audio
audio.rewind( [audioHandle | options] )	audio
audio.seek( time [, audioHandle ] [, options ] )	audio
audio.setMaxVolume( volume, options )	audio
audio.setMinVolume( volume, options )	audio
audio.setVolume( volume [, options ] )	audio
audio.stop( [channel] )	audio
audio.stopWithDelay( duration [, options ] )	audio
audio.totalChannels	audio
audio.unreservedFreeChannels	audio
audio.unreservedUsedChannels	audio
audio.usedChannels	audio
back()	WebView
blendMode	ShapeObject
bodyType	Body
bounce	PhysicsContact
canGoBack	WebView
canGoForward	WebView
canVibrate	InputDevice
collectgarbage( [opt [, arg]] )	global
connectionState	InputDevice
contentBounds	DisplayObject
contentHeight	DisplayObject
contentToLocal( xContent, yContent )	DisplayObject
contentWidth	DisplayObject
credits.init( ARG1 [, ARG2] )	credits
credits.requestUpdate( ARG1 [, ARG2] )	credits
credits.showOffers( ARG1 [, ARG2] )	credits
crypto.digest( algorithm, data [, raw] )	crypto
crypto.hmac( algorithm, data, key [, raw] )	crypto
crypto.md4	crypto
crypto.md5	crypto
crypto.sha1	crypto
crypto.sha224	crypto
crypto.sha256	crypto
crypto.sha384	crypto
crypto.sha512	crypto
currentTime	Video
dampingRatio	Joint
deleteAllRows()	TableViewWidget
deleteRow( rowIndex )	TableViewWidget
descriptor	InputAxis
descriptor	InputDevice
dispatchEvent( event )	EventListener
display.BottomCenterReferencePoint
display.BottomLeftReferencePoint
display.BottomRightReferencePoint
display.CenterLeftReferencePoint
display.CenterReferencePoint
display.CenterRightReferencePoint
display.DarkStatusBar
display.DefaultStatusBar
display.HiddenStatusBar
display.TopCenterReferencePoint
display.TopLeftReferencePoint
display.TopRightReferencePoint
display.TranslucentStatusBar
display.actualContentHeight	display
display.actualContentWidth	display
display.capture( displayObject [, saveToPhotoLibraryFlag ] )	display
display.captureBounds( screenBounds [, saveToAlbum ] )	display
display.captureScreen()	display
display.contentCenterX	display
display.contentCenterY	display
display.contentHeight	display
display.contentScaleX	display
display.contentScaleY	display
display.contentWidth	display
display.currentStage	display
display.fps	display
display.getCurrentStage()	display
display.imageSuffix	display
display.loadRemoteImage( url, method, listener [, params], destFilename [, baseDir] [, x, y] )	display
display.newCircle( xCenter, yCenter, radius )	display
display.newContainer( [parent, ] width, height )	display
display.newEmbossedText( { options } )	display
display.newGroup()	display
display.newImage( filename [,baseDirectory] [, left, top ] )	display
display.newImageGroup()	display
display.newImageRect( [parentGroup,] filename, [baseDirectory,] width, height )	display
display.newLine( [parentGroup,] x1, y1, x2, y2 )	display
display.newPolygon( x, y, vertices )	display
display.newRect( left, top, width, height )	display
display.newRoundedRect( left, top, width, height, cornerRadius )	display
display.newSnapshot( w, h )	display
display.newSprite( imageSheet, sequenceData )	display
display.newText( { options } )	display
display.pixelHeight	display
display.pixelWidth	display
display.remove( object )	display
display.save( displayObject, filename [, baseDirectory] )	display
display.screenOriginX	display
display.screenOriginY	display
display.setDefault( key, r, g, b, alpha )	display
display.setDrawMode( key, value )	display
display.setStatusBar( mode )	display
display.statusBarHeight	display
display.topStatusBarContentHeight	display
display.viewableContentHeight	display
display.viewableContentWidth	display
displayName	InputDevice
do	Keyword
easing.inExpo()	easing
easing.inOutExpo()	easing
easing.inOutQuad()	easing
easing.inQuad()	easing
easing.linear()	easing
easing.outExpo()	easing
easing.outQuad()	easing
end	Keyword
error( message [, level] )	global
event.accuracy	location
event.action	completion
event.address	networkStatus
event.altitude	location
event.applicationState	notification
event.axis	axis
event.bytesEstimated	networkRequest
event.bytesTransferred	networkRequest
event.channel	audio
event.city	mapAddress
event.cityDetail	mapAddress
event.completed	audio
event.connectionStateChanged	inputDeviceStatus
event.contact	collision
event.contact	postCollision
event.contact	preCollision
event.count	timer
event.country	mapAddress
event.countryCode	mapAddress
event.custom	notification
event.data	gameNetwork
event.delta	orientation
event.deltaTime	accelerometer
event.deltaTime	gyroscope
event.descriptor	key
event.device	axis
event.device	inputDeviceStatus
event.device	key
event.didComplete	fbconnect
event.direction	location
event.duration	completion
event.element1	collision
event.element1	preCollision
event.element2	collision
event.element2	preCollision
event.errorCode	gameNetwork
event.errorCode	location
event.errorCode	urlRequest
event.errorMessage	gameNetwork
event.errorMessage	location
event.errorMessage	mapAddress
event.errorMessage	mapLocation
event.errorMessage	unhandledError
event.errorMessage	urlRequest
event.errorType	licensing
event.expiration	fbconnect
event.expiration	licensing
event.fileSize	completion
event.force	postCollision
event.friction	postCollision
event.geographic	heading
event.handle	audio
event.header	networkRequest
event.id	touch
event.invalidProducts	productList
event.isAltDown	key
event.isConnectionOnDemand	networkStatus
event.isConnectionRequired	networkStatus
event.isCtrlDown	key
event.isError	fbconnect
event.isError	licensing
event.isError	mapAddress
event.isError	mapLocation
event.isError	networkRequest
event.isInteractionRequired	networkStatus
event.isMiddleButtonDown	mouse
event.isPrimaryButtonDown	mouse
event.isReachable	networkStatus
event.isReachableViaCellular	networkStatus
event.isReachableViaWiFi	networkStatus
event.isSecondaryButtonDown	mouse
event.isShake	accelerometer
event.isShiftDown	key
event.isVerified	licensing
event.keyName	key
event.latitude	mapLocation
event.latitude	mapMarker
event.latitude	mapTap
event.localPlayerScore	gameNetwork
event.longitude	mapLocation
event.longitude	mapMarker
event.longitude	mapTap
event.magnetic	heading
event.markerId	mapMarker
event.name	accelerometer
event.name	audio
event.name	axis
event.name	collision
event.name	completion
event.name	createScene
event.name	creditsRequest
event.name	destroyScene
event.name	didExitScene
event.name	enterFrame
event.name	enterScene
event.name	exitScene
event.name	fbconnect
event.name	finalize
event.name	gameNetwork
event.name	gyroscope
event.name	heading
event.name	inputDeviceStatus
event.name	key
event.name	licensing
event.name	location
event.name	mapAddress
event.name	mapLocation
event.name	memoryWarning
event.name	mouse
event.name	networkRequest
event.name	networkStatus
event.name	notification
event.name	orientation
event.name	overlayBegan
event.name	overlayEnded
event.name	popup
event.name	postCollision
event.name	preCollision
event.name	productList
event.name	resize
event.name	storeTransaction
event.name	system
event.name	tap
event.name	timer
event.name	touch
event.name	urlRequest
event.name	willEnterScene
event.nativeKeyCode	key
event.newCharacters	userInput
event.newCredits	creditsRequest
event.normalizedValue	axis
event.numTaps	tap
event.object1	collision
event.object1	postCollision
event.object1	preCollision
event.object2	collision
event.object2	postCollision
event.object2	preCollision
event.oldText	userInput
event.other	postCollision
event.other	preCollision
event.params	createScene
event.params	enterScene
event.params	willEnterScene
event.phase	audio
event.phase	collision
event.phase	fbconnect
event.phase	key
event.phase	networkRequest
event.phase	sprite
event.phase	touch
event.phase	userInput
event.postalCode	mapAddress
event.products	productList
event.provider	gameNetwork
event.provider	licensing
event.rawValue	axis
event.reconfigured	inputDeviceStatus
event.region	mapAddress
event.regionDetail	mapAddress
event.request	mapLocation
event.requestId	networkRequest
event.response	fbconnect
event.response	licensing
event.response	networkRequest
event.responseHeaders	networkRequest
event.responseType	networkRequest
event.sceneName	overlayBegan
event.sceneName	overlayEnded
event.source	timer
event.sprite	sprite
event.stackTrace	unhandledError
event.startPosition	userInput
event.status	networkRequest
event.street	mapAddress
event.streetDetail	mapAddress
event.target	completion
event.target	finalize
event.target	sprite
event.target	touch
event.target	userInput
event.text	userInput
event.time	enterFrame
event.time	location
event.time	mouse
event.time	timer
event.time	touch
event.token	fbconnect
event.totalCredits	creditsRequest
event.transaction	storeTransaction
event.type	fbconnect
event.type	gameNetwork
event.type	mapLocation
event.type	notification
event.type	orientation
event.type	popup
event.type	system
event.type	urlRequest
event.url	completion
event.url	networkRequest
event.url	system
event.url	urlRequest
event.x	collision
event.x	mouse
event.x	preCollision
event.x	tap
event.x	touch
event.xGravity	accelerometer
event.xInstant	accelerometer
event.xRaw	accelerometer
event.xRotation	gyroscope
event.xStart	touch
event.y	collision
event.y	mouse
event.y	preCollision
event.y	tap
event.y	touch
event.yGravity	accelerometer
event.yInstant	accelerometer
event.yRaw	accelerometer
event.yRotation	gyroscope
event.yStart	touch
event.zGravity	accelerometer
event.zInstant	accelerometer
event.zRaw	accelerometer
event.zRotation	gyroscope
facebook.login( appId, listener [, permissions ] )	facebook
facebook.logout()	facebook
facebook.publishInstall( appId )	facebook
facebook.request( path [, httpMethod, params] )	facebook
facebook.showDialog( action [, params ] )	facebook
false	Keyword
fill	ShapeObject
font	TextBox
font	TextField
forward()	WebView
frame	SpriteObject
frequency	Joint
friction	PhysicsContact
gameNetwork.init( providerName [, ...] )	gameNetwork
gameNetwork.match	GameNetwork
gameNetwork.outcome	GameNetwork
gameNetwork.participant	GameNetwork
gameNetwork.request()	gameNetwork
gameNetwork.show( name [, data ] )	gameNetwork
gameNetwork.status	GameNetwork
getAddressLocation( location )	Map
getAnchorA()	Joint
getAxes()	InputDevice
getContentPosition()	ScrollViewWidget
getContentPosition()	TableViewWidget
getCurrentProvider()	CoronaLibrary
getGroundAnchorA()	Joint
getGroundAnchorB()	Joint
getLabel()	ButtonWidget
getProgress()	ProgressViewWidget
getTarget()	Joint
getUserLocation()	Map
getValues()	PickerWidget
getfenv( [f] )	global
getmetatable( object )	global
graphics.newGradient( color1, color2 [ , direction] )	graphics
graphics.newImageSheet( filename, [baseDir, ] options )	graphics
graphics.newMask( filename [, baseDir] )	graphics
gravityScale	Body
group:insert( [index,] child, [, resetTransform] )	GroupObject
hasBackground	TextBox
hasBackground	TextField
hasBackground	WebView
height	DisplayObject
initialize()	CoronaPrototype
inputType	TextField
insertRow( options )	TableViewWidget
instanceOf( class )	CoronaPrototype
io.close( [file] )	io
io.flush()	io
io.input( [file] )	io
io.lines( filename )	io
io.open( filename_path, [, mode] )	io
io.output( [file] )	io
io.read( [fmt1] [, fmt2] [, ...] )	io
io.tmpfile()	io
io.type( obj )	io
io.write( arg1 [, arg2] [, ...] )	io
ipairs( t )	global
isAwake	Body
isBodyActive	Body
isBullet	Body
isClass()	CoronaPrototype
isCollideConnected	Joint
isConnected	InputDevice
isEditable	TextBox
isEnabled	PhysicsContact
isFixedRotation	Body
isHitTestMasked	DisplayObject
isHitTestable	DisplayObject
isLimitEnabled	Joint
isLocationVisible	Map
isMotorEnabled	Joint
isMuted	Video
isPlaying	SpriteObject
isRoot()	CoronaPrototype
isScrollEnabled	Map
isSecure	TextField
isSensor	Body
isSleepingAllowed	Body
isTouching	PhysicsContact
isVisible	DisplayObject
isZoomEnabled	Map
joint1	Joint
joint2	Joint
jointAngle	Joint
jointSpeed	Joint
jointTranslation	Joint
json.decode( data )	json
json.encode( table )	json
json.null	json
length	Joint
length1	Joint
length2	Joint
licensing.init( providerName )	licensing
licensing.verify( listener )	licensing
limitState	Joint
linearDamping	Body
load( path )	Video
localToContent( x, y )	DisplayObject
mapType	Map
maskRotation	DisplayObject
maskScaleX	DisplayObject
maskScaleY	DisplayObject
maskX	DisplayObject
maskY	DisplayObject
math.abs( x )	math
math.acos( x )	math
math.asin( x )	math
math.atan( x )	math
math.atan2( y, x )	math
math.ceil( x )	math
math.cos( x )	math
math.cosh( x )	math
math.deg( x )	math
math.exp( x )	math
math.floor( x )	math
math.fmod( x, y )	math
math.frexp( x )	math
math.huge	math
math.inf	math
math.ldexp( m, e )	math
math.log( x )	math
math.log10( x )	math
math.max( x, ... )	math
math.min( x, ... )	math
math.modf( x )	math
math.pi	math
math.pow( x, y )	math
math.rad( x )	math
math.random()	math
math.randomseed( x )	math
math.round( x )	math
math.sin( x )	math
math.sinh( x )	math
math.sqrt( x )	math
math.tan( x )	math
math.tanh( x )	math
maxForce	Joint
maxLength	Joint
maxMotorForce	Joint
maxMotorTorque	Joint
maxTorque	Joint
maxValue	InputAxis
maximumValue = 50,	StepperWidget
media.Camera
media.PhotoLibrary
media.RemoteSource	media
media.SavedPhotosAlbum
media.capturePhoto	media
media.captureVideo	media
media.getSoundVolume()	media
media.hasSource( mediaSource )	media
media.newEventSound( filename [, baseDir] )	media
media.newRecording( [path] )	media
media.pauseSound()	media
media.playEventSound( sound [, baseDir] [, completionListener] )	media
media.playSound( soundfile [, baseDir] [, onComplete] )	media
media.playVideo( path [, baseSource ], showControls, listener )	media
media.save( filename [, baseDir] )	media
media.selectPhoto	media
media.selectVideo	media
media.setSoundVolume( vol )	media
media.show( mediaSource, listener )	media
media.stopSound()	media
minValue	InputAxis
minimumValue = 0,	StepperWidget
module()	package
motorForce	Joint
motorSpeed	Joint
motorTorque	Joint
name	CoronaLibrary
native.canShowPopup( name )	native
native.cancelAlert( alert )	native
native.cancelWebPopup()	native
native.getFontNames()	native
native.getProperty( key )	native
native.getSync( filename, parms )	native
native.newFont( name [, size] )	native
native.newMapView( left, top, width, height )	native
native.newTextBox( left, top, width, height [, listener ] )	native
native.newTextField( left, top, width, height [, listener] )	native
native.newVideo( left, top, width, height )	native
native.newWebView( left, top, width, height )	native
native.requestExit()	native
native.setActivityIndicator( state )	native
native.setKeyboardFocus( textField )	native
native.setProperty( key, value )	native
native.setSync( filename, params )	native
native.showAlert( title, message [, { buttonLabels } [, listener] ] )	native
native.showPopup( name )	native
native.showWebPopup( url [, options] )  	native
native.systemFont
native.systemFont	native
native.systemFontBold
native.systemFontBold	native
nearestAddress( latitude, longitude, resultHandler )	Map
network.canDetectNetworkStatusChanges	network
network.cancel( requestId )	network
network.download( url, method, listener [, params], filename [, baseDirectory] )	network
network.request( url, method, listener [, params] )	network
network.setStatusListener( hostURL, listener )	network
network.upload( url, method, listener [, params], filename [, baseDirectory] [, contentType] )	network
new()	CoronaPrototype
newClass( name )	CoronaPrototype
next( array [, index] )	global
nil	Keyword
numChildren	GroupObject
numFrames	SpriteObject
number	InputAxis
os.clock()	os
os.date( [format [, time] ] )	os
os.difftime( t1, t2 )	os
os.execute( cmd )	os
os.exit( [ exit ] )	os
os.remove( file )	os
os.rename( oldname, newname )	os
os.time( [table] )	os
package.loaded	package
package.loaders	package
package.seeall	package
paint.rotation	BitmapPaint
paint.scaleX	BitmapPaint
paint.scaleY	BitmapPaint
paint.x	BitmapPaint
paint.y	BitmapPaint
pairs( t )	global
parent	DisplayObject
path	ShapeObject
pause()	Video
pcall( f [, ...] )	global
permanentId	InputDevice
physics.addBody( object, [bodyType,] {density=d, friction=f, bounce=b [,filter=f]} )	physics
physics.fromMKS( unitName, value ) 	physics
physics.getAverageCollisionPositions()	physics
physics.getDebugErrorsEnabled()	physics
physics.getGravity()	physics
physics.getMKS( key )	physics
physics.getReportCollisionsInContentCoordinates()	physics
physics.newJoint( jointType, ... )	physics
physics.pause()	physics
physics.queryRegion()	physics
physics.rayCast()	physics
physics.reflectRay()	physics
physics.removeBody( object )	physics
physics.setAverageCollisionPositions( enabled )	physics
physics.setContinuous( enabled )	physics
physics.setDebugErrorsEnabled( enabled )	physics
physics.setDrawMode( mode )	physics
physics.setGravity( gx, gy )	physics
physics.setMKS( key, value )	physics
physics.setPositionIterations( value )	physics
physics.setReportCollisionsInContentCoordinates( enabled )	physics
physics.setScale( value )	physics
physics.setTimeStep( dt )	physics
physics.setVelocityIterations( value )	physics
physics.start()	physics
physics.stop()	physics
physics.toMKS( unitName, value )	physics
play()	Video
print( ... )	global
publisherId	CoronaLibrary
ratio	Joint
rawequal( value1, value2 )	global
rawget( table, index )	global
rawset( table, index, value )	global
reactionTorque	Joint
reload()	WebView
remove( indexOrChild )	GroupObject
removeAllMarkers()	Map
removeEventListener( eventName, listener )	EventListener
removeMarker(markerId)	Map
removeSelf()	DisplayObject
removeSelf()	Joint
request( url )	WebView
requestLocation( location, resultHandler )	Map
require()	package
resizeView( newWidth )	ProgressViewWidget
revision	CoronaLibrary
rotate( deltaAngle )	DisplayObject
rotation	DisplayObject
scale( xScale, yScale )	DisplayObject
scrollTo( position, options )	ScrollViewWidget
scrollToIndex( index, time, onComplete )	TableViewWidget
scrollToPosition( options )	ScrollViewWidget
scrollToY( options )	TableViewWidget
seek( timeInSeconds )	Video
select( index, ... )	global
sequence	SpriteObject
setCenter( latitude, longitude [, isAnimated] )	Map
setCurrentProvider( provider )	CoronaLibrary
setEnabled( isEnabled )	ButtonWidget
setExtension( indexFunc )	CoronaPrototype
setFillColor( gray )	ShapeObject
setLabel( label )	ButtonWidget
setMask( mask )	DisplayObject
setProgress( progress )	ProgressViewWidget
setReferencePoint( referencePoint )	DisplayObject
setRegion( latitude, longitude, latitudeSpan, longitudeSpan [, isAnimated] )	Map
setReturnKey(key)	TextBox
setReturnKey(key)	TextField
setScrollHeight( newHeight )	ScrollViewWidget
setScrollWidth( newWidth )	ScrollViewWidget
setSelected( buttonIndex )	TabBarWidget
setSequence( [ sequenceName ] )	SpriteObject
setState( options )	SwitchWidget
setStrokeColor( gray )	ShapeObject
setTarget( x, y )	Joint
setTextColor( gray )	TextObject
setTextColor( r, g, b )	TextBox
setTextColor( r, g, b )	TextField
setValue( percent )	SliderWidget
setfenv( f, table )	global
setmetatable( table, metatable )	global
size	TextBox
size	TextField
size	TextObject
snapshot.canvas	SnapshotObject
snapshot.canvasMode	SnapshotObject
snapshot.clearColor	SnapshotObject
snapshot.group	SnapshotObject
snapshot.textureFilter	SnapshotObject
snapshot.textureWrapX	SnapshotObject
snapshot.textureWrapY	SnapshotObject
snapshot:invalidate()	SnapshotObject
springDampingRatio	Joint
springFrequency	Joint
start()	SpinnerWidget
stop()	SpinnerWidget
stop()	WebView
store.availableStores	store
store.canLoadProducts	store
store.canMakePurchases	store
store.finishTransaction( transaction )	store
store.init( [storeName,] listener )	store
store.isActive	store
store.loadProducts( productIdentifiers, listener )	store
store.purchase( productList )	store
store.restore()	store
store.target	store
storyboard.disableAutoPurge	storyboard
storyboard.getCurrentSceneName()	storyboard
storyboard.getPrevious()	storyboard
storyboard.getScene( sceneName )	storyboard
storyboard.gotoScene( sceneName [, options] )	storyboard
storyboard.hideOverlay( [ purgeOnly, effect, effectTime ] )	storyboard
storyboard.isDebug	storyboard
storyboard.loadScene( sceneName [, doNotLoadView, params ] )	storyboard
storyboard.newScene( [ sceneName ] )	storyboard
storyboard.printMemUsage()	storyboard
storyboard.purgeAll()	storyboard
storyboard.purgeOnSceneChange	storyboard
storyboard.purgeScene( sceneName )	storyboard
storyboard.reloadScene()	storyboard
storyboard.removeAll()	storyboard
storyboard.removeScene( sceneName )	storyboard
storyboard.showOverlay( sceneName [, options ] )	storyboard
storyboard.stage	storyboard
string.byte( s [, i [, j]] )	string
string.char( [arg1 [, ...] )	string
string.find( s, pattern [, init [, plain]] )	string
string.format( formatstring [, ...] )	string
string.gmatch( s, pattern )	string
string.gsub( s, pattern, repl [, n] )	string
string.len( s )	string
string.lower( s )	string
string.match( s, pattern [, init] ) 	string
string.rep( s, n )	string
string.reverse( s )	string
string.sub( s, i [, j] )	string
string.upper( s )	string
stroke	ShapeObject
strokeWidth	ShapeObject
system.CachesDirectory	system
system.DocumentsDirectory	system
system.ResourceDirectory	system
system.TemporaryDirectory	system
system.activate( feature )	system
system.cancelNotification()	system
system.deactivate()	system
system.getIdleTimer()	system
system.getInfo( property )	system
system.getInputDevices()	system
system.getPreference( category, name )	system
system.getTimer()	system
system.hasEventSource( eventName )	system
system.openURL( url )	system
system.orientation	system
system.pathForFile( filename [, baseDirectory] )	system
system.scheduleNotification( secondsFromNow [, options] )	system
system.setAccelerometerInterval( frequency )	system
system.setGyroscopeInterval( frequency )	system
system.setIdleTimer( enabled )	system
system.setLocationAccuracy( distance )	system
system.setLocationThreshold( distance )	system
system.setTapDelay( delayTime )	system
system.vibrate()	system
table.concat( t )	table
table.copy( t )	table
table.indexOf( t, element )	table
table.insert( t, value )	table
table.maxn( t )	table
table.remove( t )	table
table.sort( t )	table
takeFocus( event )	ScrollViewWidget
text	TextBox
text	TextField
text	TextObject
then	Keyword
timeScale	SpriteObject
timer.cancel( timerId )	timer
timer.pause( timerId )	timer
timer.performWithDelay( delay, listener [, iterations] )	timer
timer.resume( timerId )	timer
toBack()	DisplayObject
toFront()	DisplayObject
tonumber( e [, base ] )	global
tostring( e )	global
totalTime	Video
transition.blink( target, params )	transition
transition.cancel()	transition
transition.fadeIn( target, params )	transition
transition.fadeOut( target, params )	transition
transition.from( target, params )	transition
transition.moveBy( target, params )	transition
transition.moveTo( target, params )	transition
transition.pause()	transition
transition.resume()	transition
transition.scaleBy( target, params )	transition
transition.scaleTo( target, params )	transition
transition.to( target, params )	transition
translate( deltaX, deltaY )	DisplayObject
true	Keyword
type	InputAxis
type	InputDevice
type( v )	global
type.Module	type
unpack( list [, i [, j ]] )	global
value	SliderWidget
value	StepperWidget
version	CoronaLibrary
vibrate()	InputDevice
widget.newButton( options )	widget
widget.newPickerWheel( options )	widget
widget.newProgressView( options )	widget
widget.newScrollView( options )	widget
widget.newSegmentedControl( options )	widget
widget.newSlider( options )	widget
widget.newSpinner( options )	widget
widget.newStepper( options )	widget
widget.newSwitch( options )	widget
widget.newTabBar( options )	widget
widget.newTableView( options )	widget
widget.setTheme( themeFile )	widget
width	DisplayObject
x	DisplayObject
xScale	DisplayObject
y	DisplayObject
yScale	DisplayObject
